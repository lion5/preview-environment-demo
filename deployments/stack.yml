AWSTemplateFormatVersion: 2010-09-09
Parameters:
  ClusterArn:
    Type: String
    Description: ARN of the cluster
  Namespace:
    Type: String
    Description: Name of the environment
  AccountId:
    Type: String
    Description: ID of the AWS account
  Vpc:
    Type: String
    Default: vpc-00aa46df83ae04b6e
  Subnets:
    Type: CommaDelimitedList
    Default: subnet-0d73a1d8e54aa99ea,subnet-0cf4a9eeae2e1c6d8

Outputs:
  DeploymentUrl:
    Description: URL of the deployed application.
    Value: !Join ["", ["http://", !GetAtt LoadBalancer.DNSName]]

Resources:
  ApplicationService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListenerHTTP
    Properties:
      ServiceName: !Join ["-", [!Ref Namespace, "application"]]
      Cluster: !Ref ClusterArn
      TaskDefinition: !Ref ApplicationTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 90
      LoadBalancers:
        - ContainerName: !Join ["-", [!Ref Namespace, "application"]]
          ContainerPort: 8080
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets: !Ref Subnets
          SecurityGroups:
            - !Ref ApplicationExecutionRole
  
  ApplicationTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      TaskRoleArn: !GetAtt ApplicationTaskRole.Arn
      Family: !Join ["-", [!Ref Namespace, "application"]]
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: "512"
      Memory: "1024"
      ContainerDefinitions:
        - Name: !Join ["-", [!Ref Namespace, "application"]]
          Image: !Join ["", [!Ref AccountId, ".dkr.ecr.eu-central-1.amazonaws.com/prev-application"]]
          MemoryReservation: 1024
          PortMappings:
            - ContainerPort: 8080
              HostPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: eu-central-1
              awslogs-group: !Join ["-", [!Ref Namespace, "application"]]
              awslogs-stream-prefix: !Join ["-", [!Ref Namespace, "application"]]
  
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      Type: application
      LoadBalancerAttributes:
        - Key: deletion_protection.enabled
          Value: "false"
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref Subnets
  
  LoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "10"
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref Vpc
      HealthCheckPath: /
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
  
  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref LoadBalancerTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: "HTTP"
  
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Namespace, "application-lb-sg"]]
      GroupDescription: Allow traffic to port 80
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
  
  ApplicationExecutionRole:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ["-", [!Ref Namespace, "application-cf-sg"]]
      GroupDescription: Allow traffic to port 8080
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
  
  ApplicationLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ["-", [!Ref Namespace, "application"]]
      RetentionInDays: 30
  
  ApplicationTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref Namespace, "application-role"]]
      Description: Role to execute the Application
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
  
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join ["-", [!Ref Namespace, "application-execution-role"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: AllowTaskExecution
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"